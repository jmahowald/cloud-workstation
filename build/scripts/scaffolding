#!/usr/bin/env python


"""scaffolding   A homeless man's version of maven archetype.  
Uses dockerize to process template directories and generate files for project types. 
 For instance, will generate .travis.yml and 
Jenkinsfile for docker projects

dockerscript will generate a shell script that you can use to launch your images
with the appropriate mappings


Usage:
  scaffolding dockerproj [--registry=<registry>]  [--outdir=<dir>] <image> 
  scaffolding dockerscript  [-v VOLUMES] [-e ENV_VARS] [-w WORKING_DIR]  <image> 

Options:
   -o --outdir=<dir>      where to put the generated files> [default: .]
   -e --envvars ENVVARS comma separated list of environment variables to map
   -v --volumes VOLUMES  comma separated list if volume mounts over and above any working dire
   -w --working_dir WORKING_DIR  what is the working dir of the container [default: /workspace]
   -r --registry registry to upload to
Arguments:
  image  the name of the image

"""

from docopt import docopt

import os 
from subprocess import Popen, PIPE



SCRIPT_PATH = os.path.dirname(os.path.realpath(__file__))
# For error outputs
CRED = '\033[91m'

def execute(cmd,env):
  proc = Popen(cmd, env=env,stdout=PIPE, stderr=PIPE)
  out,err = proc.communicate()
  print out
  if proc.returncode != 0: 
    print CRED + "Error executing {cmd}".format(cmd=cmd) + "\n" + err



if __name__ == '__main__':
    opts = docopt(__doc__, version='scaffolding 1.0')
#    print(opts)
    my_env = os.environ.copy()
    my_env['IMAGE_NAME'] = opts['<image>']

    # Get the image name sans the registry
    image_base_name = my_env['IMAGE_NAME'].split("/")[-1]
    outdir = opts['--outdir']
    if opts['dockerscript']:
      my_env['VOLUMES'] = opts['--volumes'] if opts['--volumes'] else ''
      my_env['ENV_VARS'] = opts['--envvars'] if opts['--envvars'] else ''
      my_env['WORKDIR'] = opts['--working_dir'] if opts['--working_dir'] else ''

      cmd = ['dockerize', "-template","/opt/cloud-workstation/templates/launch-docker.sh:%s/%s.sh" % (outdir, image_base_name) ] 

    if opts['dockerproj']:
      if opts['--registry']:
        my_env['DOCKER_REGISTRY']=opts['--registry']
      cmd = ['dockerize', "-template","/opt/cloud-workstation/templates/docker:%s" % outdir ] 
    execute(cmd,my_env)


    

